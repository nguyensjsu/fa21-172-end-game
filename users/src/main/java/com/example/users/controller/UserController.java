package com.example.users.controller;

import java.util.List;

import com.example.users.entity.User;
import com.example.users.repository.UserRepository;
import com.example.users.service.UserService;

import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import lombok.extern.slf4j.Slf4j;

//import org.springframework.web.server.ResponseStatusException;
//import javax.servlet.http.HttpServletResponse;
//import org.springframework.http.HttpStatus;

//@CrossOrigin(origins = "http://localhost:3000")
@RestController // This means that this class is a RestController
@RequestMapping("/") // This means URL's start with / (after Application path)
@Slf4j
public class UserController 
{
    @Autowired // This means to get the bean called userRepository which is auto-generated by Spring, we will use it to handle the data
    UserRepository repository;

    @Autowired
    private UserService userService;

    // Get all users
    @GetMapping("/all")
    public @ResponseBody List<User> findAllUsers() 
    {
        // This returns a JSON or XML with the users
        return repository.findAll();
    }
    
    // Post a new user
    @PostMapping("/add")
    public User saveUser(@RequestBody User newUser) 
    {
        log.info("Inside saveUser of UserController");
        //return repository.save(newUser);
        return userService.saveUser(newUser);
    }
    
    /*
    // User login validation
    @GetMapping("/auth")
    String getUser(@RequestParam(value = "userName") String userName, @RequestParam(value = "password") String password) throws ServerException{
        User user = repository.findByUserName(userName);
        HttpHeaders responseHeaders = new HttpHeaders();
        if (user == null){
            responseHeaders.set("status", HttpStatus.NOT_FOUND + "");
        }
        else if(user.getPassword().equals(password)){
            responseHeaders.set("status", HttpStatus.OK + "");
        }
        else{
            responseHeaders.set("status", HttpStatus.UNAUTHORIZED + "");

        }
        return responseHeaders.toString();
    }
    */
    // Login a user
    //@PostMapping("/login")
    //String loginUser(@RequestBody User newUser) 
    //{
    //    User user = repository.findByUserName(newUser.getUserName());
    //    if(user.getPassword().equals(newUser.getPassword()))
    //    {
    //        return "login";
    //    }
    //    else
    //    {
    //        return "error";
    //    }
    //}

    // Update a user, Reset Password implementation(?)
    @PutMapping("/changepassword")
    User replaceUserPassword(@RequestBody User newUser) 
    {
        User pass = repository.findByUserName(newUser.getUserName());
            
        pass.setPassword(newUser.getPassword());
        return repository.save(pass);
    }

    // Delete user
    @DeleteMapping("/{id}")
    void deleteUser(@PathVariable Long id) 
    {
        if(repository.existsById(id)) {repository.deleteById(id);}
        else {log.info("User ID does not exist.");}
    }
}
