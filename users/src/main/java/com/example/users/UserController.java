package com.example.users;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@RestController // This means that this class is a RestController
@RequestMapping("/users") // This means URL's start with / (after Application path)
public class UserController 
{
    @Autowired // This means to get the bean called userRepository which is auto-generated by Spring, we will use it to handle the data
    private UserRepository repository;
    
    /*
    private final UserRepository repository;

    UserController(UserRepository repository)
    {
        this.repository = repository;
    }
    */

    // Get all users
    @GetMapping("/all")
    public @ResponseBody List<User> findAllUsers() 
    {
        // This returns a JSON or XML with the users
        return repository.findAll();
    }

    // Add a new user
    @PostMapping("/add") 
    public @ResponseBody String addNewUser (@RequestParam String userName, @RequestParam String email, @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        User n = new User();
        n.setUserName(userName);
        n.setEmail(email);
        n.setPassword(password);
        repository.save(n);
        return "Saved";
    }

    /*
    // Post a new user
    @PostMapping("/users")
    User newUser(@RequestBody User newUser) 
    {
        return repository.save(newUser);
    }
    */

    // Get a specific user by id
    @GetMapping("/{id}")
    User one(@PathVariable Long id) 
    {
        return repository.findById(id).orElseThrow(() -> new UserNotFoundException(id));
    }

    // Update a user, Reset Password implementation(?)
    @PutMapping("/{id}")
    User replaceUser(@RequestBody User newUser, @PathVariable Long id) 
    {
        
        return repository.findById(id).map(user -> {
            user.setEmail(newUser.getEmail());
            user.setPassword(newUser.getPassword());
            user.setUserName(newUser.getUserName());
            return repository.save(user);
        })
        .orElseGet(() -> {
            newUser.setId(id);
            return repository.save(newUser);
        });
    }

    // Delete user
    @DeleteMapping("/{id}")
    void deleteEmployee(@PathVariable Long id) 
    {
        repository.deleteById(id);
    }
}
